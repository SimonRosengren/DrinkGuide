[{"/Users/simonrosengren/repos/drinkguide/client/src/reportWebVitals.js":"1","/Users/simonrosengren/repos/drinkguide/client/src/components/header/header.js":"2","/Users/simonrosengren/repos/drinkguide/client/src/App.js":"3","/Users/simonrosengren/repos/drinkguide/client/src/components/ingredientForm/ingredientForm.js":"4","/Users/simonrosengren/repos/drinkguide/client/src/index.js":"5","/Users/simonrosengren/repos/drinkguide/client/src/components/button/button.js":"6","/Users/simonrosengren/repos/drinkguide/client/src/components/main/main.js":"7","/Users/simonrosengren/repos/drinkguide/client/src/components/inputWithButton/inputWithButton.js":"8","/Users/simonrosengren/repos/drinkguide/client/src/components/ingredientPicker/IngredientPicker.js":"9","/Users/simonrosengren/repos/drinkguide/client/src/components/ingredientCard/ingredientCard.js":"10","/Users/simonrosengren/repos/drinkguide/client/src/components/logo/logo.js":"11"},{"size":362,"mtime":1610567974503,"results":"12","hashOfConfig":"13"},{"size":245,"mtime":1612562200355,"results":"14","hashOfConfig":"13"},{"size":311,"mtime":1612561948739,"results":"15","hashOfConfig":"13"},{"size":4139,"mtime":1612387291511,"results":"16","hashOfConfig":"13"},{"size":500,"mtime":1610567974502,"results":"17","hashOfConfig":"13"},{"size":448,"mtime":1611786575683,"results":"18","hashOfConfig":"13"},{"size":298,"mtime":1612561835031,"results":"19","hashOfConfig":"13"},{"size":798,"mtime":1612473903940,"results":"20","hashOfConfig":"13"},{"size":3016,"mtime":1612653371491,"results":"21","hashOfConfig":"13"},{"size":584,"mtime":1612648206515,"results":"22","hashOfConfig":"13"},{"size":317,"mtime":1612562238392,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"10tjgll",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"/Users/simonrosengren/repos/drinkguide/client/src/reportWebVitals.js",[],["53","54"],"/Users/simonrosengren/repos/drinkguide/client/src/components/header/header.js",[],"/Users/simonrosengren/repos/drinkguide/client/src/App.js",["55"],"import './App.css';\nimport Main from './components/main/main';\nimport Header from './components/header/header';\nimport IngredientForm from './components/ingredientForm/ingredientForm';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n",["56","57"],"/Users/simonrosengren/repos/drinkguide/client/src/components/ingredientForm/ingredientForm.js",["58"],"import React, { useState } from \"react\";\nimport \"./ingredientForm.scss\";\nimport Button from '../button/button'\n\nfunction IngredientForm(props) {\n  const [recipeName, setRecipeName] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [instructions, setInstructions] = useState(\"\");\n  const [ingredientInput, setIngredientInput] = useState(\"\");\n  const [ingredients, setIngredients] = useState([]);\n  const [suggestions, setSuggestions] = useState([]);\n  const [currentIngredient, setCurrentIngredient] = useState({});\n  const [qtyInput, setQtyInput] = useState(0);\n\n  const suggestIngredients = async (e) => {\n    setIngredientInput(e.target.value);\n    if (e.target.value) {\n      const result = await (\n        await fetch(\n          `/api/ingredient/suggest?phrase=${e.target.value}`\n        )\n      ).json();\n      let temp = [];\n      (result || []).forEach((i) => {\n        temp.push(i); // We have _id here aswell\n      });\n      setSuggestions(temp);\n    } else {\n      setSuggestions([]);\n    }\n  };\n\n  const handleIngredientsInput = (e) => {\n    const clickedIngredient = suggestions.find((i) => i.name === e.target.innerHTML)\n    setCurrentIngredient(clickedIngredient);\n    setIngredientInput(e.target.innerHTML)\n  };\n\n  const addIngredient = () => {\n    let temp = ingredients;\n    temp.push({ \n        qtyInput,\n        ...currentIngredient\n     });\n    setIngredients(temp);\n    setIngredientInput(\"\");\n    setQtyInput(\"\")\n    setSuggestions([]);\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    console.log(recipeName)\n    const result = await fetch(`/api/recipe`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n            name: recipeName,\n            description,\n            instructions,\n            ingredients\n        })\n    })\n    \n  };\n\n  return (\n    <div className=\"formContainer\">\n      <form onSubmit={handleSubmit}>\n        <div className=\"inputWrapper\">\n          <label for=\"name\">Name</label>\n          <input\n            type=\"text\"\n            name=\"name\"\n            className=\"fullsize\"\n            value={recipeName}\n            onChange={(e) => {\n              setRecipeName(e.target.value);\n            }}\n          />\n        </div>\n\n        <div className=\"inputWrapper\">\n          <label for=\"description\">Description</label>\n          <textarea\n            type=\"text\"\n            name=\"description\"\n            className=\"fullsize\"\n            value={description}\n            onChange={(e) => {\n              setDescription(e.target.value);\n            }}\n          />\n        </div>\n\n        <div className=\"inputWrapper\">\n          <label for=\"instructions\">Instructions</label>\n          <textarea\n            type=\"text\"\n            name=\"instructions\"\n            className=\"fullsize\"\n            value={instructions}\n            onChange={(e) => {\n              setInstructions(e.target.value);\n            }}\n          />\n        </div>\n\n        <div className=\"ingredientWrapper\">\n          <div className=\"suggestionWrapper\">\n            <div className=\"inputWrapper\">\n              <label for=\"ingredients\">Ingredients</label>\n              <input\n                type=\"text\"\n                name=\"ingredients\"\n                className=\"halfsize\"\n                value={ingredientInput}\n                onChange={(e) => {\n                  suggestIngredients(e);\n                }}\n              />\n            </div>\n\n            <div className=\"inputWrapper\">\n              <ul className=\"halfsize\">\n                {suggestions.map((s, index) => (\n                  <li key={index} onClick={handleIngredientsInput}>\n                    {s.name}\n                  </li>\n                ))}\n              </ul>\n            </div>\n          </div>\n          <input type=\"text\" name=\"qty\" className=\"halfsize\" value={qtyInput} onChange={e => setQtyInput(e.target.value)} />\n          <Button text=\"add\" onClick={() => { addIngredient() }} />\n        </div>\n\n        <input type=\"submit\" value=\"Submit\" />\n      </form>\n    </div>\n  );\n}\n\nexport default IngredientForm;\n",["59","60"],"/Users/simonrosengren/repos/drinkguide/client/src/index.js",[],"/Users/simonrosengren/repos/drinkguide/client/src/components/button/button.js",[],"/Users/simonrosengren/repos/drinkguide/client/src/components/main/main.js",["61"],"/Users/simonrosengren/repos/drinkguide/client/src/components/inputWithButton/inputWithButton.js",["62"],"import React, { useState } from \"react\";\nimport styles from \"./inputWithButton.module.scss\";\nimport { RiSearch2Line } from \"react-icons/ri\";\n\nfunction InputWithButton(props) {\n  const [value, setValue] = useState(\"\");\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    console.log(value);\n  };\n\n  const handleOnChange = e => {\n    setValue(e.target.value);\n    if (props.handleOnChange) {\n      props.handleOnChange(e);\n    }\n  }\n\n  return (\n    <div className={styles.wrapper}>\n        <input\n          className={styles.input}\n          type=\"text\"\n          value={value}\n          placeholder=\"Search ingredients...\"\n          onChange={e => handleOnChange(e)}\n        />\n        <div className={styles.button}><RiSearch2Line /></div>\n    </div>\n  );\n}\n\nexport default InputWithButton;\n","/Users/simonrosengren/repos/drinkguide/client/src/components/ingredientPicker/IngredientPicker.js",[],"/Users/simonrosengren/repos/drinkguide/client/src/components/ingredientCard/ingredientCard.js",[],"/Users/simonrosengren/repos/drinkguide/client/src/components/logo/logo.js",[],["63","64"],{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","severity":1,"message":"70","line":4,"column":8,"nodeType":"71","messageId":"72","endLine":4,"endColumn":22},{"ruleId":"65","replacedBy":"73"},{"ruleId":"67","replacedBy":"74"},{"ruleId":"69","severity":1,"message":"75","line":54,"column":11,"nodeType":"71","messageId":"72","endLine":54,"endColumn":17},{"ruleId":"65","replacedBy":"76"},{"ruleId":"67","replacedBy":"77"},{"ruleId":"69","severity":1,"message":"78","line":1,"column":17,"nodeType":"71","messageId":"72","endLine":1,"endColumn":25},{"ruleId":"69","severity":1,"message":"79","line":8,"column":9,"nodeType":"71","messageId":"72","endLine":8,"endColumn":21},{"ruleId":"65","replacedBy":"80"},{"ruleId":"67","replacedBy":"81"},"no-native-reassign",["82"],"no-negated-in-lhs",["83"],"no-unused-vars","'IngredientForm' is defined but never used.","Identifier","unusedVar",["82"],["83"],"'result' is assigned a value but never used.",["82"],["83"],"'useState' is defined but never used.","'handleSubmit' is assigned a value but never used.",["82"],["83"],"no-global-assign","no-unsafe-negation"]